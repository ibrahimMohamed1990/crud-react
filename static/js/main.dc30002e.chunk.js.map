{"version":3,"sources":["component/Form.js","component/Lists.js","App.js","serviceWorker.js","index.js"],"names":["From","props","onSubmit","add","type","placeholder","name","onChange","update","Lists","state","isEdit","renderCourse","data","onClick","toggleState","del","index","setState","submitUpdate","e","preventDefault","console","log","target","elements","coco","value","editCourse","input","renderUpdate","defaultValue","val","ref","v","this","Component","App","lists","id","current","curr","courses","push","course","splice","courseList","map","item","key","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOAaeA,G,MAXF,SAACC,GAEd,OACA,0BAAMC,SAAUD,EAAME,KAClB,2BAAOC,KAAK,OAAOC,YAAY,aAAaC,KAAK,SAASC,SAAUN,EAAMO,SACtE,4BAAQJ,KAAK,UAAb,cCiDOK,E,4MArDbC,MAAM,CACJC,QAAS,G,EAGTC,aAAe,WACN,OAEJ,4BACE,8BAAO,EAAKX,MAAMY,KAAKP,MACvB,4BAAQQ,QAAW,EAAKC,aAAxB,QACA,4BAAQD,QAAU,kBAAM,EAAKb,MAAMe,IAAI,EAAKf,MAAMgB,SAAlD,O,EAOPF,YAAc,WACZ,IAAIJ,EAAS,EAAKD,MAAMC,OACxB,EAAKO,SAAS,CACZP,QAASA,K,EAKbQ,aAAe,SAACC,GACdA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEI,OAAOC,SAASC,KAAKC,OACnC,EAAK1B,MAAM2B,WAAW,EAAK3B,MAAMgB,MAAQ,EAAKY,MAAMF,OACpD,EAAKZ,e,EAKPe,aAAe,WACb,OACC,0BAAM5B,SAAU,EAAKiB,cACnB,2BAAOf,KAAK,OAAOE,KAAK,OAAOyB,aAAc,EAAK9B,MAAM+B,IAAKC,IAAK,SAACC,GAAD,OAAO,EAAKL,MAAQK,KACtF,mD,uDAMP,IAAIvB,EAASwB,KAAKzB,MAAMC,OACxB,OACE,kBAAC,WAAD,KACKA,EAASwB,KAAKL,eAAiBK,KAAKvB,oB,GAhDzBwB,aCiELC,E,4MA5Db3B,MAAQ,CACN4B,MAAQ,CACN,CAACC,GAAG,EAAEjC,KAAK,QACX,CAACiC,GAAG,EAAEjC,KAAK,OACX,CAACiC,GAAG,EAAEjC,KAAK,QACX,CAACiC,GAAG,EAAEjC,KAAK,OAEbkC,QAAQ,I,EAIVhC,OAAS,SAACY,GACR,EAAKF,SAAS,CACZsB,QAAQpB,EAAEI,OAAOG,S,EAMrBxB,IAAM,SAACiB,GACLA,EAAEC,iBACF,IAAIoB,EAAO,EAAK/B,MAAM8B,QAClBE,EAAU,EAAKhC,MAAM4B,MACzBI,EAAQC,KAAK,CAACrC,KAAKmC,IACnB,EAAKvB,SAAS,CAACoB,MAAMI,EAASF,QAAQ,KACtCpB,EAAEI,OAAOC,SAASmB,OAAOjB,MAAQ,I,EAGnCX,IAAM,SAACC,GACL,IAAIyB,EAAU,EAAKhC,MAAM4B,MACzBI,EAAQG,OAAO5B,EAAM,GACrB,EAAKC,SAAS,CAACoB,MAAMI,K,EAMvBd,WAAa,SAACW,EAAGP,GACf,IAAIU,EAAU,EAAKhC,MAAM4B,MACZI,EAAQH,GACf,KAAWP,EACjB,EAAKd,SAAS,CAACoB,MAAMI,K,uDAIb,IAAD,OAEHI,EADUX,KAAKzB,MAAM4B,MACAS,KAAI,SAACC,EAAO/B,GACrC,OAAQ,kBAAC,EAAD,CAAOJ,KAAMmC,EAAMC,IAAKhC,EAAOe,IAAK,EAAKtB,MAAM4B,MAAMrB,GAAjB,KAAiCA,MAAOA,EAAOD,IAAK,EAAKA,IAAKY,WAAY,EAAKA,gBAE7H,OACE,6BAASsB,UAAU,OACjB,2CACA,kBAAC,EAAD,CAAM/C,IAAKgC,KAAKhC,IAAKK,OAAQ2B,KAAK3B,SAClC,4BAAKsC,Q,GAxDOV,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.dc30002e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst From = (props) => \r\n{\r\nreturn ( \r\n<form onSubmit={props.add}>\r\n    <input type=\"text\" placeholder=\"add course\" name=\"course\" onChange={props.update} />\r\n        <button type=\"submit\">add new</button>\r\n</form>\r\n)\r\n\r\n}\r\n\r\nexport default From ","import React, { Component, Fragment } from 'react'; \r\n\r\nclass Lists extends Component {\r\n  state={\r\n    isEdit : false\r\n  }\r\n\r\n    renderCourse = () => { \r\n             return( \r\n             \r\n         <li>\r\n           <span>{this.props.data.name}</span>\r\n           <button onClick={  this.toggleState }>edit</button>\r\n           <button onClick={ () => this.props.del(this.props.index)}>x</button>\r\n         </li>\r\n             \r\n               ) \r\n        \r\n    }\r\n\r\n    toggleState = () => {\r\n      let isEdit = this.state.isEdit\r\n      this.setState({\r\n        isEdit:! isEdit\r\n      })\r\n    }\r\n\r\n\r\n    submitUpdate = (e) => { \r\n      e.preventDefault()\r\n      console.log(e.target.elements.coco.value)\r\n      this.props.editCourse(this.props.index , this.input.value)\r\n      this.toggleState() \r\n\r\n    }\r\n\r\n\r\n    renderUpdate = () => { \r\n      return( \r\n       <form onSubmit={this.submitUpdate}>\r\n         <input type=\"text\" name=\"coco\" defaultValue={this.props.val} ref={(v) => this.input = v}/>\r\n         <button>updtae course</button>\r\n       </form>\r\n        ) \r\n \r\n}\r\nrender() {\r\n  let isEdit = this.state.isEdit\r\n  return(\r\n    <Fragment>  \r\n      {  isEdit ? this.renderUpdate() : this.renderCourse()}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n}\r\nexport default Lists","import React, { Component } from 'react';\nimport './App.css';\nimport From from './component/Form';\nimport Lists from './component/Lists';\n\nclass App extends Component {\n\n  state = {\n    lists : [\n      {id:1,name:\"html\"},\n      {id:2,name:\"css\"},\n      {id:3,name:\"java\"},\n      {id:4,name:\"C#\"},\n    ],\n    current:''\n  }\n\n  //update course  \n  update = (e) =>{\n    this.setState({\n      current:e.target.value\n    })\n  }\n \n  // add course\n\n  add = (e) =>{\n    e.preventDefault()\n    let curr = this.state.current\n    let courses = this.state.lists\n    courses.push({name:curr})\n    this.setState({lists:courses, current:''})\n    e.target.elements.course.value = ''\n  }\n  // delete course\n  del = (index) =>{\n    let courses = this.state.lists\n    courses.splice(index,1)\n    this.setState({lists:courses })\n \n  }\n\n  // edit\n  \n  editCourse = (id,val) => {\n    let courses = this.state.lists\n    let course = courses[id]\n    course['name'] = val\n    this.setState({lists:courses })\n  }\n\n\n  render() {\n  const courses = this.state.lists\n  const courseList = courses.map((item , index) =>{\n    return (<Lists data={item} key={index} val={this.state.lists[index]['name']} index={index} del={this.del} editCourse={this.editCourse}/>)\n  })\n  return (\n    <section className=\"App\">\n      <h2>Add Courses</h2>\n      <From add={this.add} update={this.update}/>\n      <ul>{courseList}</ul>\n    </section>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \nserviceWorker.unregister();\n"],"sourceRoot":""}